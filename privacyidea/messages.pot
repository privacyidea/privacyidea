# Translations template for PROJECT.
# Copyright (C) 2019 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2019-05-23 07:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: api/auth.py:182
msgid "Authentication failure. Missing Username"
msgstr ""

#: api/auth.py:272
msgid "Authentication failure. Wrong credentials"
msgstr ""

#: api/policy.py:172
msgid "The name of the policy may only contain the characters a-zA-Z0-9_."
msgstr ""

#: api/policy.py:176
msgid "T'check' is an invalid policy name."
msgstr ""

#: api/lib/utils.py:253
msgid "Authentication failure. Missing Authorization header."
msgstr ""

#: api/lib/utils.py:258
msgid "Authentication failure. Error during decoding your token: {0!s}"
msgstr ""

#: api/lib/utils.py:261
msgid "Authentication failure. Your token has expired: {0!s}"
msgstr ""

#: api/lib/utils.py:266
msgid ""
"Authentication failure. You do not have the necessary role ({0!s}) to "
"access this resource!"
msgstr ""

#: lib/decorators.py:42 lib/token.py:2090
msgid "This action is not possible, since the token is locked"
msgstr ""

#: lib/decorators.py:90
msgid "You need to specify a serial or a user."
msgstr ""

#: lib/decorators.py:92
msgid "Invalid serial number."
msgstr ""

#: lib/decorators.py:94
msgid "Invalid user."
msgstr ""

#: lib/error.py:170
msgid "You either need to provide user or serial"
msgstr ""

#: lib/policy.py:1070
msgid "Define in which resolver the user should be registered."
msgstr ""

#: lib/policy.py:1074
msgid "Define in which realm the user should be registered."
msgstr ""

#: lib/policy.py:1078
msgid ""
"The SMTP server configuration, that should be used to send the "
"registration email."
msgstr ""

#: lib/policy.py:1082
msgid ""
"Only users with this email address are allowed to register. This is a "
"regular expression."
msgstr ""

#: lib/policy.py:1087
msgid ""
"The body of the registration email. Use '{regkey}' as tagfor the "
"registration key."
msgstr ""

#: lib/policy.py:1093
msgid "Admin is allowed to enable tokens."
msgstr ""

#: lib/policy.py:1097
msgid "Admin is allowed to disable tokens."
msgstr ""

#: lib/policy.py:1101
msgid "Admin is allowed to set token properties."
msgstr ""

#: lib/policy.py:1106
msgid "Admin is allowed to set the OTP PIN of tokens."
msgstr ""

#: lib/policy.py:1112
msgid "Admin is allowed to manually set and delete token info."
msgstr ""

#: lib/policy.py:1116
msgid "Admin is allowed to set the OTP PIN during enrollment."
msgstr ""

#: lib/policy.py:1121
msgid "Admin is allowed to resync tokens."
msgstr ""

#: lib/policy.py:1125
msgid "Admin is allowed to reset the Failcounter of a token."
msgstr ""

#: lib/policy.py:1131
msgid "Admin is allowed to revoke a token"
msgstr ""

#: lib/policy.py:1135
msgid "Admin is allowed to assign a token to a user."
msgstr ""

#: lib/policy.py:1141
msgid "Admin is allowed to remove the token from a user, i.e. unassign a token."
msgstr ""

#: lib/policy.py:1148
msgid "Admin is allowed to import token files."
msgstr ""

#: lib/policy.py:1153
msgid "Admin is allowed to remove tokens from the database."
msgstr ""

#: lib/policy.py:1159
msgid "Admin is allowed to view the list of the users."
msgstr ""

#: lib/policy.py:1165
msgid "The Admin is allowed to list the machines."
msgstr ""

#: lib/policy.py:1170
msgid "The Admin is allowed to attach and detach tokens to machines."
msgstr ""

#: lib/policy.py:1177
msgid ""
"The Admin is allowed to fetch authentication items of tokens assigned to "
"machines."
msgstr ""

#: lib/policy.py:1182
msgid "Admin is allowed to manage the realms of a token."
msgstr ""

#: lib/policy.py:1187
msgid "Admin is allowed to retrieve a serial for a given OTP value."
msgstr ""

#: lib/policy.py:1192
msgid "Admin is allowed to retrieve random keys from privacyIDEA."
msgstr ""

#: lib/policy.py:1196
msgid "Admin is allowed to copy the PIN of one token to another token."
msgstr ""

#: lib/policy.py:1202
msgid ""
"Admin is allowed to copy the assigned user to another token, i.e. assign "
"a user ot another token."
msgstr ""

#: lib/policy.py:1209
msgid "Admin is allowed to trigger the lost token workflow."
msgstr ""

#: lib/policy.py:1215
msgid "Admin is allowed to write and modify the system configuration."
msgstr ""

#: lib/policy.py:1220
msgid "Admin is allowed to delete keys in the system configuration."
msgstr ""

#: lib/policy.py:1226
msgid ""
"Admin is allowed to export a documentation of the complete configuration "
"including resolvers and realm."
msgstr ""

#: lib/policy.py:1234
msgid "Admin is allowed to write and modify the policies."
msgstr ""

#: lib/policy.py:1239
msgid "Admin is allowed to delete policies."
msgstr ""

#: lib/policy.py:1244
msgid "Admin is allowed to write and modify the resolver and realm configuration."
msgstr ""

#: lib/policy.py:1251
msgid "Admin is allowed to delete resolvers and realms."
msgstr ""

#: lib/policy.py:1256
msgid ""
"Admin is allowed to create new CA Connector definitions and modify "
"existing ones."
msgstr ""

#: lib/policy.py:1262
msgid "Admin is allowed to delete CA Connector definitions."
msgstr ""

#: lib/policy.py:1267
msgid "Admin is allowed to write and modify the machine resolvers."
msgstr ""

#: lib/policy.py:1273
msgid "Admin is allowed to delete machine resolvers."
msgstr ""

#: lib/policy.py:1280 lib/policy.py:1452
msgid "Set the maximum allowed length of the OTP PIN."
msgstr ""

#: lib/policy.py:1285 lib/policy.py:1457
msgid "Set the minimum required length of the OTP PIN."
msgstr ""

#: lib/policy.py:1289 lib/policy.py:1461
msgid ""
"Specifiy the required contents of the OTP PIN. (c)haracters, (n)umeric, "
"(s)pecial, (o)thers. [+/-]!"
msgstr ""

#: lib/policy.py:1295
msgid "Admin is allowed to view the Audit log."
msgstr ""

#: lib/policy.py:1299
msgid "The admin will only see audit entries of the last 10d, 3m or 2y."
msgstr ""

#: lib/policy.py:1304
msgid "The admin is allowed to download the complete auditlog."
msgstr ""

#: lib/policy.py:1309
msgid "Admin is allowed to add users in a userstore/UserIdResolver."
msgstr ""

#: lib/policy.py:1314
msgid "Admin is allowed to update the users data in a userstore."
msgstr ""

#: lib/policy.py:1319
msgid "Admin is allowed to delete a user object in a userstore."
msgstr ""

#: lib/policy.py:1324
msgid "Admin is allowed to set the password of the HSM/Security Module."
msgstr ""

#: lib/policy.py:1328
msgid "Admin is allowed to retrieve the list of active challenges."
msgstr ""

#: lib/policy.py:1334
msgid "Admin is allowed to write new SMTP server definitions."
msgstr ""

#: lib/policy.py:1339
msgid "Admin is allowed to write new RADIUS server definitions."
msgstr ""

#: lib/policy.py:1345
msgid "Admin is allowed to write remote privacyIDEA server definitions."
msgstr ""

#: lib/policy.py:1352
msgid "Admin is allowed to write periodic task definitions."
msgstr ""

#: lib/policy.py:1357
msgid "Admin is allowed to read statistics data."
msgstr ""

#: lib/policy.py:1360
msgid "Admin is allowed to delete statistics data."
msgstr ""

#: lib/policy.py:1363
msgid "Admin is allowed to write and modify the event handling configuration."
msgstr ""

#: lib/policy.py:1369
msgid "Admin is allowed to write and modify SMS gateway definitions."
msgstr ""

#: lib/policy.py:1375
msgid "Admin is allowed to get the list of authenticated clients and their types."
msgstr ""

#: lib/policy.py:1382
msgid "Admin is allowed to add and delete component subscriptions."
msgstr ""

#: lib/policy.py:1388
msgid "The Admin is allowed to trigger a challenge for e.g. SMS OTP token."
msgstr ""

#: lib/policy.py:1398
msgid ""
"The user is allowed to assign an existing token that is not yet assigned "
"using the token serial number."
msgstr ""

#: lib/policy.py:1404
msgid "The user is allowed to disable his own tokens."
msgstr ""

#: lib/policy.py:1410
msgid "The user is allowed to enable his own tokens."
msgstr ""

#: lib/policy.py:1416
msgid "The user is allowed to delete his own tokens."
msgstr ""

#: lib/policy.py:1422
msgid "The user is allowed to unassign his own tokens."
msgstr ""

#: lib/policy.py:1427
msgid "The user is allowed to resyncronize his tokens."
msgstr ""

#: lib/policy.py:1432
msgid "The user is allowed to revoke a token"
msgstr ""

#: lib/policy.py:1437
msgid "The user is allowed to reset the failcounter of his tokens."
msgstr ""

#: lib/policy.py:1442
msgid "The user is allowed to set the OTP PIN of his tokens."
msgstr ""

#: lib/policy.py:1447
msgid "The user is allowed to set the OTP PIN during enrollment."
msgstr ""

#: lib/policy.py:1469
msgid "Allow the user to view his own token history."
msgstr ""

#: lib/policy.py:1472
msgid "The user will only see audit entries of the last 10d, 3m or 2y."
msgstr ""

#: lib/policy.py:1476
msgid "The user is allowed to view his own user information."
msgstr ""

#: lib/policy.py:1480
msgid ""
"The user is allowed to update his own user information, like changing his"
" password."
msgstr ""

#: lib/policy.py:1485
msgid "The user is allowed to do a password reset in an editable UserIdResolver."
msgstr ""

#: lib/policy.py:1494
msgid "Limit the number of allowed tokens in a realm."
msgstr ""

#: lib/policy.py:1498
msgid "Limit the number of tokens a user may have assigned."
msgstr ""

#: lib/policy.py:1504
msgid "Set a random OTP PIN with this length for a token."
msgstr ""

#: lib/policy.py:1509
msgid "In case of a random OTP PIN use this python module to process the PIN."
msgstr ""

#: lib/policy.py:1514
msgid ""
"If the administrator sets the OTP PIN during enrollment or later, the "
"user will have to change the PIN during first use."
msgstr ""

#: lib/policy.py:1521
msgid ""
"The user needs to change his PIN on a regular basis. To change the PIN "
"every 180 days, enter '180d'."
msgstr ""

#: lib/policy.py:1528
msgid ""
"The OTP PIN can be hashed or encrypted. Hashing the PIN is the default "
"behaviour."
msgstr ""

#: lib/policy.py:1533
msgid ""
"Set label for a new enrolled Google Authenticator. Possible tags are <u> "
"(user), <r> (realm), <s> (serial)."
msgstr ""

#: lib/policy.py:1539
msgid "This is the issuer label for new enrolled Google Authenticators."
msgstr ""

#: lib/policy.py:1545
msgid "This is the URL to the token image for smartphone apps like FreeOTP."
msgstr ""

#: lib/policy.py:1552
msgid ""
"Users can assign a token just by using the unassigned token to "
"authenticate."
msgstr ""

#: lib/policy.py:1558
msgid "The length of the password in case of temporary token (lost token)."
msgstr ""

#: lib/policy.py:1562
msgid ""
"The contents of the temporary password, described by the characters C, c,"
" n, s, 8."
msgstr ""

#: lib/policy.py:1567
msgid "The length of the validity for the temporary token (in days)."
msgstr ""

#: lib/policy.py:1575
msgid ""
"Either use the Token PIN , use the Userstore Password or use no fixed "
"password component."
msgstr ""

#: lib/policy.py:1580
msgid ""
"This is a whitespace separated list of tokentypes, that can be used with "
"challenge response."
msgstr ""

#: lib/policy.py:1585
msgid ""
"Use an alternate challenge text for telling the user to enter an OTP "
"value."
msgstr ""

#: lib/policy.py:1590
msgid ""
"If there are several different challenges, this text precedes the list of"
" the challenge texts."
msgstr ""

#: lib/policy.py:1595
msgid ""
"If there are several different challenges, this text follows the list of "
"the challenge texts."
msgstr ""

#: lib/policy.py:1601
msgid ""
"If set, the user in this realm will be authenticated against the "
"userstore or against the given RADIUS config, if the user has no tokens "
"assigned."
msgstr ""

#: lib/policy.py:1608
msgid ""
"If the user has no token, the authentication request for this user will "
"always be true."
msgstr ""

#: lib/policy.py:1613
msgid ""
"If the user user does not exist, the authentication request for this non-"
"existing user will always be true."
msgstr ""

#: lib/policy.py:1619
msgid ""
"Can be used to modify the parameters pass, user and realm in an "
"authentication request. See the documentation for an example."
msgstr ""

#: lib/policy.py:1625
msgid ""
"If a user authenticates successfully reset the failcounter of all of his "
"tokens."
msgstr ""

#: lib/policy.py:1630
msgid ""
"Cache the password used for authentication and allow authentication with "
"the same credentials for a certain amount of time. Specify timeout like "
"4h or 4h/5m."
msgstr ""

#: lib/policy.py:1639
msgid ""
"You can specify how many successful authentication requests a user is "
"allowed to do in a given time. Specify like 1/5s, 2/10m, 10/1h - s, m, h "
"being second, minute and hour."
msgstr ""

#: lib/policy.py:1646
msgid ""
"You can specify how many failed authentication requests a user is allowed"
" to do in a given time. Specify like 1/5s, 2/10m, 10/1h - s, m, h being "
"second, minute and hour."
msgstr ""

#: lib/policy.py:1653
msgid ""
"You can specify in which time frame the user needs to authenticate again "
"with this token. If the user authenticates later, authentication will "
"fail. Specify like 30h, 7d or 1y."
msgstr ""

#: lib/policy.py:1660
msgid "The user will only be authenticated with this very tokentype."
msgstr ""

#: lib/policy.py:1664
msgid ""
"The user will only be authenticated if the serial number of the token "
"matches this regexp."
msgstr ""

#: lib/policy.py:1668
msgid ""
"The user will only be authenticated if the tokeninfo field matches the "
"regexp. key/<regexp>/"
msgstr ""

#: lib/policy.py:1673
msgid ""
"The Realm of the user is set to this very realm. This is important if the"
" user is not contained in the default realm and can not pass his realm."
msgstr ""

#: lib/policy.py:1678
msgid ""
"In case of successful authentication additional no detail information "
"will be returned."
msgstr ""

#: lib/policy.py:1682
msgid ""
"In case of failed authentication additional no detail information will be"
" returned."
msgstr ""

#: lib/policy.py:1686
msgid ""
"In case of successful authentication user data will be added in the "
"detail branch of the authentication response."
msgstr ""

#: lib/policy.py:1691
msgid ""
"In case of successful authentication the user resolver and realm will be "
"added in the detail branch of the authentication response."
msgstr ""

#: lib/policy.py:1696
msgid ""
"The sending of an API Auth Key is required duringauthentication. This "
"avoids rogue authenticate requests against the /validate/check interface."
msgstr ""

#: lib/policy.py:1705
msgid ""
"If set to \"privacyIDEA\" the users and admins need to authenticate "
"against privacyIDEA when they log in to the Web UI. Defaults to "
"\"userstore\""
msgstr ""

#: lib/policy.py:1714
msgid ""
"An alternative text to display on the WebUI login dialog instead of "
"\"Please sign in\"."
msgstr ""

#: lib/policy.py:1718
msgid ""
"When searching in the user list, the search will only performed when "
"pressing enter."
msgstr ""

#: lib/policy.py:1723
msgid ""
"The action taken when a user is idle beyond the logout_time limit. "
"Defaults to \"lockscreen\"."
msgstr ""

#: lib/policy.py:1731
msgid ""
"The REMOTE_USER set by the webserver can be used to login to privacyIDEA "
"or it will be ignored. Defaults to \"disable\"."
msgstr ""

#: lib/policy.py:1737
msgid ""
"Set the time in seconds after which the user will be logged out from the "
"WebUI. Default: 120"
msgstr ""

#: lib/policy.py:1742
msgid "Set how many tokens should be displayed in the token view on one page."
msgstr ""

#: lib/policy.py:1747
msgid "Set how many users should be displayed in the user view on one page."
msgstr ""

#: lib/policy.py:1752
msgid "Use your own html template for the web UI menu."
msgstr ""

#: lib/policy.py:1756
msgid "Use your own html template for the web UI baseline/footer."
msgstr ""

#: lib/policy.py:1760
msgid ""
"Whether the user ID and the resolver should be displayed in the token "
"list."
msgstr ""

#: lib/policy.py:1765
msgid ""
"The URL of a repository, where the policy templates can be found.  "
"(Default https: //raw.githubusercontent.com/ privacyidea/policy-templates"
" /master/templates/)"
msgstr ""

#: lib/policy.py:1772
msgid "As long as a user has no token, he will only see a token wizard in the UI."
msgstr ""

#: lib/policy.py:1777
msgid ""
"The tokenwizard will be displayed in the token menu, even if the user "
"already has a token."
msgstr ""

#: lib/policy.py:1782
msgid "This is the default token type in the token enrollment dialog."
msgstr ""

#: lib/policy.py:1788
msgid ""
"A list of realm names, which are displayed in a drop down menu in the "
"WebUI login screen. Realms are separated by white spaces."
msgstr ""

#: lib/policy.py:1794
msgid ""
"If this checked, the administrator will not see the welcome dialog "
"anymore."
msgstr ""

#: lib/policy.py:1799
msgid ""
"Per default disabled actions result in disabled buttons. When checking "
"this action, buttons of disabled actions are hidden."
msgstr ""

#: lib/policy.py:1804
msgid "If this is checked, the seed will be displayed as text during enrollment."
msgstr ""

#: lib/radiusserver.py:204 lib/radiusserver.py:236
msgid "The RADIUS secret is too long"
msgstr ""

#: lib/token.py:2319
msgid "Admin is allowed to initalize {0!s} tokens."
msgstr ""

#: lib/token.py:2327
msgid "The user is allowed to enroll a {0!s} token."
msgstr ""

#: lib/token.py:2358
msgid "Set the maximum allowed PIN length of the {0!s} token."
msgstr ""

#: lib/token.py:2365
msgid "Set the minimum required PIN length of the {0!s} token."
msgstr ""

#: lib/token.py:2371
msgid ""
"Specifiy the required PIN contents of the {0!s} token. (c)haracters, "
"(n)umeric, (s)pecial, (o)thers. [+/-]!"
msgstr ""

#: lib/tokenclass.py:1463
msgid "please enter otp: "
msgstr ""

#: lib/eventhandler/base.py:132
msgid "The realm of the user, for which this event should apply."
msgstr ""

#: lib/eventhandler/base.py:137
msgid "The resolver of the user, for which this event should apply."
msgstr ""

#: lib/eventhandler/base.py:142
msgid "The realm of the token, for which this event should apply."
msgstr ""

#: lib/eventhandler/base.py:148
msgid "The resolver of the token, for which this event should apply."
msgstr ""

#: lib/eventhandler/base.py:154
msgid "The type of the token."
msgstr ""

#: lib/eventhandler/base.py:159
msgid "The logged in user is of the following type."
msgstr ""

#: lib/eventhandler/base.py:164
msgid "The result.value within the response is True or False."
msgstr ""

#: lib/eventhandler/base.py:170
msgid "The result.status within the response is True or False."
msgstr ""

#: lib/eventhandler/base.py:176
msgid "Check if the max failcounter of the token is reached."
msgstr ""

#: lib/eventhandler/base.py:182
msgid "The token has a user assigned."
msgstr ""

#: lib/eventhandler/base.py:187
msgid ""
"The token has a user assigned, but the user does not exist in the "
"userstore anymore."
msgstr ""

#: lib/eventhandler/base.py:193
msgid "Check if the token is within its validity period."
msgstr ""

#: lib/eventhandler/base.py:198
msgid "Action is triggered, if the serial matches this regular expression."
msgstr ""

#: lib/eventhandler/base.py:203
msgid "Action is triggered, if the user has this number of tokens assigned."
msgstr ""

#: lib/eventhandler/base.py:208
msgid ""
"Action is triggered, if the counter of the token equals this setting. Can"
" also be '>100' or '<99' for no exact match."
msgstr ""

#: lib/eventhandler/base.py:214
msgid ""
"Action is triggered, if the last authentication of the token is older "
"than 7h, 10d or 1y."
msgstr ""

#: lib/eventhandler/base.py:219
msgid ""
"This can be '>100', '<99', or '=100', to trigger the action, if the "
"tokeninfo field 'count_auth' is bigger than 100, less than 99 or exactly "
"100."
msgstr ""

#: lib/eventhandler/base.py:225
msgid ""
"This can be '>100', '<99', or '=100', to trigger the action, if the "
"tokeninfo field 'count_auth_success' is bigger than 100, less than 99 or "
"exactly 100."
msgstr ""

#: lib/eventhandler/base.py:232
msgid ""
"This can be '>100', '<99', or '=100', to trigger the action, if the "
"difference between the tokeninfo field 'count_auth' and "
"'count_auth_success is bigger than 100, less than 99 or exactly 100."
msgstr ""

#: lib/eventhandler/base.py:239
msgid ""
"This condition can check any arbitrary tokeninfo field. You need to enter"
" something like '<fieldname> == <fieldvalue>', '<fieldname> > "
"<fieldvalue>' or '<fieldname> < <fieldvalue>'"
msgstr ""

#: lib/eventhandler/base.py:246
msgid ""
"Here you can enter a regular expression. The condition only applies if "
"the regular expression matches the detail->error->message in the "
"response."
msgstr ""

#: lib/eventhandler/base.py:252
msgid ""
"Here you can enter a regular expression. The condition only applies if "
"the regular expression matches the detail->message in the response."
msgstr ""

#: lib/eventhandler/base.py:258
msgid "Trigger the action, if the client IP matches."
msgstr ""

#: lib/eventhandler/counterhandler.py:68 lib/eventhandler/counterhandler.py:73
#: lib/eventhandler/counterhandler.py:81
msgid "The identifier/key of the counter."
msgstr ""

#: lib/eventhandler/counterhandler.py:76
msgid "Don't stop counter if it reaches zero."
msgstr ""

#: lib/eventhandler/federationhandler.py:75
msgid "The remote/child privacyIDEA Server."
msgstr ""

#: lib/eventhandler/federationhandler.py:80
msgid "Change the realm name to a realm on the child privacyIDEA system."
msgstr ""

#: lib/eventhandler/federationhandler.py:86
msgid "Change the resolver name to a resolver on the child privacyIDEA system."
msgstr ""

#: lib/eventhandler/federationhandler.py:92
msgid ""
"Forward the client IP to the child privacyIDEA server. Otherwise this "
"server will be the client."
msgstr ""

#: lib/eventhandler/federationhandler.py:99
msgid ""
"Forward the authorization header. This allows to also forward request "
"like token- and system-requests."
msgstr ""

#: lib/eventhandler/scripthandler.py:95
msgid ""
"Wait for script to complete or run script in background. This will either"
" return the HTTP request early or could also block the request."
msgstr ""

#: lib/eventhandler/scripthandler.py:103
msgid "On script error raise exception in HTTP request."
msgstr ""

#: lib/eventhandler/scripthandler.py:107
msgid "Add '--serial <serial number>' as script parameter."
msgstr ""

#: lib/eventhandler/scripthandler.py:112
msgid "Add '--user <username>' as script parameter."
msgstr ""

#: lib/eventhandler/scripthandler.py:117
msgid "Add '--realm <realm>' as script parameter."
msgstr ""

#: lib/eventhandler/scripthandler.py:122
msgid ""
"Add the username of the logged in user as script parameter like '--"
"logged_in_user <username>'."
msgstr ""

#: lib/eventhandler/scripthandler.py:128
msgid ""
"Add the role (either admin or user) of the logged in user as script "
"parameter like '--logged_in_role <role>'."
msgstr ""

#: lib/eventhandler/tokenhandler.py:122
msgid "set a new realm of the token"
msgstr ""

#: lib/eventhandler/tokenhandler.py:126
msgid ""
"The new realm will be the only realm of the token. I.e. all other realms "
"will be removed from this token. Otherwise the realm will be added to the"
" token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:141
msgid "Token type to create"
msgstr ""

#: lib/eventhandler/tokenhandler.py:146
msgid "Assign token to user in request or to tokenowner."
msgstr ""

#: lib/eventhandler/tokenhandler.py:151
msgid "Set the realm of the newly created token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:158
msgid "Dynamically read the mobile number from the user store."
msgstr ""

#: lib/eventhandler/tokenhandler.py:165
msgid "Dynamically read the email address from the user store."
msgstr ""

#: lib/eventhandler/tokenhandler.py:170
msgid "A dictionary of additional init parameters."
msgstr ""

#: lib/eventhandler/tokenhandler.py:176
msgid ""
"Set the MOTP PIN of the MOTP token during enrollment. This is a required "
"value for enrolling MOTP tokens."
msgstr ""

#: lib/eventhandler/tokenhandler.py:185
msgid "The new description of the token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:192
msgid ""
"The token will be valid starting at the given date. Can be a fixed date "
"or an offset like +10m, +24h, +7d."
msgstr ""

#: lib/eventhandler/tokenhandler.py:199
msgid ""
"The token will be valid until the given date. Can be a fixed date or an "
"offset like +10m, +24h, +7d."
msgstr ""

#: lib/eventhandler/tokenhandler.py:212
msgid "Set the new count window of the token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:222
msgid "Set the failcounter of the token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:231
msgid "Set this tokeninfo key."
msgstr ""

#: lib/eventhandler/tokenhandler.py:236
msgid "Set the above key the this value."
msgstr ""

#: lib/eventhandler/tokenhandler.py:245
msgid "Delete this tokeninfo key."
msgstr ""

#: lib/eventhandler/usernotification.py:114
msgid "Send notification email via this email server."
msgstr ""

#: lib/eventhandler/usernotification.py:119
msgid "Either send email as plain text or HTML."
msgstr ""

#: lib/eventhandler/usernotification.py:124
msgid "The subject of the mail that is sent."
msgstr ""

#: lib/eventhandler/usernotification.py:129
msgid "The Reply-To header in the sent email."
msgstr ""

#: lib/eventhandler/usernotification.py:134
msgid "The body of the mail that is sent."
msgstr ""

#: lib/eventhandler/usernotification.py:139
#: lib/eventhandler/usernotification.py:181
msgid "Send notification to this user."
msgstr ""

#: lib/eventhandler/usernotification.py:161
msgid "Any email address, to which the notification should be sent."
msgstr ""

#: lib/eventhandler/usernotification.py:170
msgid "Send the user notification via a predefined SMS gateway."
msgstr ""

#: lib/eventhandler/usernotification.py:177
msgid "The text of the SMS."
msgstr ""

#: lib/machines/ldap.py:338
#, python-format
msgid "Your LDAP config seems to be OK, %i machine objects found."
msgstr ""

#: lib/resolvers/LDAPIdResolver.py:968
msgid ""
"Your LDAP config found {0!s} user objects, but only {1!s} with the "
"specified uidtype"
msgstr ""

#: lib/resolvers/LDAPIdResolver.py:971
msgid "Your LDAP config seems to be OK, {0!s} user objects found."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:149
msgid ""
"The URL the Push App should contact in the second enrollment step. "
"Usually it is the endpoint /ttype/push of the privacyIDEA server."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:153
msgid ""
"The second enrollment step must be completed within this time (in "
"minutes)."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:157
msgid ""
"The project ID, that the client should use. Get it from your Firebase "
"console."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:161
msgid ""
"The project number, that the client should use. Get it from your Firebase"
" console."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:166
msgid ""
"The App ID, that the Android client should use. Get it from your Firebase"
" console."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:171
msgid ""
"The API Key, that the Android client should use. Get it from your "
"Firebase console."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:176
msgid ""
"The App ID, that the iOS client should use. Get it from your Firebase "
"console."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:181
msgid ""
"The API Key, that the iOS client should use. Get it from your Firebase "
"console."
msgstr ""

#: lib/smsprovider/FirebaseProvider.py:186
msgid ""
"The filename of the JSON config file, that allows privacyIDEA to talk to "
"the Firebase REST API."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:237
msgid "The base URL of the HTTP Gateway"
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:240
msgid "Should the HTTP Gateway be connected via an HTTP GET or POST request."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:245
msgid ""
"Specify a substring, that indicates, that the SMS was delivered "
"successfully."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:249
msgid "Specify a substring, that indicates, that the SMS failed to be delivered."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:253
msgid "Username in case of basic authentication."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:257
msgid "Password in case of basic authentication."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:261
msgid "Should the SSL certificate be verified."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:266
msgid ""
"Regular expression to modify the phone number to make it compatible with "
"provider. Enter something like '/[\\+/]//' to remove pluses and slashes."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:271
msgid ""
"An optional proxy string. DEPRECATED. Do not usethis anymore. Rather use "
"HTTP_PROXY for http connections andHTTPS_PROXY for https connection. The "
"PROXY option will beremoved in future."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:275
msgid "Proxy setting for HTTP connections."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:276
msgid "Proxy setting for HTTPS connections."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:277
msgid "The timeout in seconds."
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:128
msgid "SMSC Host IP"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:131
msgid "SMSC Port"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:133
msgid "SMSC Service ID"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:135
msgid "Password for authentication on SMSC"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:137
msgid "SOURCE_ADDR_TON Special Flag"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:139
msgid "S_ADDR_NPI Special Flag"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:141
msgid "Source address (SMS sender)"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:142
msgid "DESTINATION_ADDR_TON Special Flag"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:143
msgid "D_ADDR_NPI Special Flag"
msgstr ""

#: lib/task/eventcounter.py:42
msgid "The name of the event counter to read."
msgstr ""

#: lib/task/eventcounter.py:47
msgid "The name of the stats key to write to the MonitoringStats table."
msgstr ""

#: lib/task/eventcounter.py:53
msgid ""
"Whether to reset the event_counter, if it is read and written to the "
"MonitoringStats table."
msgstr ""

#: lib/task/simplestats.py:48
msgid "Total number of tokens"
msgstr ""

#: lib/task/simplestats.py:51
msgid "Total number of hardware tokens"
msgstr ""

#: lib/task/simplestats.py:54
msgid "Total number of software tokens"
msgstr ""

#: lib/task/simplestats.py:57
msgid "Number of hardware tokens not assigned to a user"
msgstr ""

#: lib/task/simplestats.py:60
msgid "Number of tokens assigned to users"
msgstr ""

#: lib/task/simplestats.py:63
msgid "Number of users with tokens assigned"
msgstr ""

#: lib/tokens/certificatetoken.py:153
msgid "Certificate: Enroll an x509 Certificate Token."
msgstr ""

#: lib/tokens/daplugtoken.py:120
msgid "event based OTP token using the HOTP algorithm"
msgstr ""

#: lib/tokens/emailtoken.py:151
msgid "EMail Token"
msgstr ""

#: lib/tokens/emailtoken.py:153
msgid "EMail: Send a One Time Password to the users email address."
msgstr ""

#: lib/tokens/emailtoken.py:161
msgid ""
"The text that will be sent via EMail for an EMail token. Use <otp> and "
"<serial> as parameters. You may also specify a filename as email template"
" starting with \"file:\"."
msgstr ""

#: lib/tokens/emailtoken.py:167
msgid ""
"The subject of the EMail for an EMail token. Use <otp> and <serial> as "
"parameters."
msgstr ""

#: lib/tokens/emailtoken.py:172
msgid ""
"If set, a new EMail OTP will be sent after successful authentication with"
" one EMail OTP."
msgstr ""

#: lib/tokens/emailtoken.py:177
msgid ""
"Use an alternate challenge text for telling the user to enter the code "
"from the eMail."
msgstr ""

#: lib/tokens/emailtoken.py:255
msgid "Enter the OTP from the Email:"
msgstr ""

#: lib/tokens/foureyestoken.py:125
msgid "4Eyes Token: Use tokens of two or more users to authenticate"
msgstr ""

#: lib/tokens/hotptoken.py:120
msgid "Specify the hashlib to be used. Can be sha1 (1) or sha2-256 (2)."
msgstr ""

#: lib/tokens/hotptoken.py:122
msgid "Specify the otplen to be used. Can be 6 or 8 digits."
msgstr ""

#: lib/tokens/hotptoken.py:123 lib/tokens/totptoken.py:140
msgid "Specify whether users are allowed or forced to use two-step enrollment."
msgstr ""

#: lib/tokens/hotptoken.py:125 lib/tokens/totptoken.py:146
msgid "Specify whether admins are allowed or forced to use two-step enrollment."
msgstr ""

#: lib/tokens/hotptoken.py:129
msgid "HOTP: Event based One Time Passwords."
msgstr ""

#: lib/tokens/hotptoken.py:137
msgid "The Yubikey access code used to initialize Yubikeys."
msgstr ""

#: lib/tokens/hotptoken.py:141 lib/tokens/totptoken.py:152
msgid "The size of the OTP seed part contributed by the client (in bytes)"
msgstr ""

#: lib/tokens/hotptoken.py:145 lib/tokens/totptoken.py:155
msgid "The size of the OTP seed part contributed by the server (in bytes)"
msgstr ""

#: lib/tokens/hotptoken.py:149 lib/tokens/totptoken.py:158
msgid ""
"The difficulty factor used for the OTP seed generation (should be at "
"least 10000)"
msgstr ""

#: lib/tokens/hotptoken.py:163 lib/tokens/totptoken.py:135
msgid "Force the key to be generated on the server."
msgstr ""

#: lib/tokens/hotptoken.py:244
msgid "URL for google Authenticator"
msgstr ""

#: lib/tokens/hotptoken.py:258
msgid "URL for OATH token"
msgstr ""

#: lib/tokens/motptoken.py:139
msgid "URL for MOTP token"
msgstr ""

#: lib/tokens/ocratoken.py:90
msgid "OCRA: Enroll an OCRA token."
msgstr ""

#: lib/tokens/papertoken.py:108 lib/tokens/tantoken.py:109
msgid "The number of OTP values, which are printed on the paper."
msgstr ""

#: lib/tokens/passwordtoken.py:101
msgid ""
"A token with a fixed password. Can be combined  with the OTP PIN. Is used"
" for the lost token scenario."
msgstr ""

#: lib/tokens/pushtoken.py:64
msgid "Please confirm the authentication on your mobile device!"
msgstr ""

#: lib/tokens/pushtoken.py:65
msgid "Do you want to confirm the login?"
msgstr ""

#: lib/tokens/pushtoken.py:207
msgid "PUSH Token"
msgstr ""

#: lib/tokens/pushtoken.py:209
msgid "PUSH: Send a push notification to a smartphone."
msgstr ""

#: lib/tokens/pushtoken.py:217
msgid "The configuration of your Firebase application."
msgstr ""

#: lib/tokens/pushtoken.py:223
msgid "The smartphone needs to verify SSL during the enrollment. (default 1)"
msgstr ""

#: lib/tokens/pushtoken.py:231
msgid "The question the user sees on his mobile phone."
msgstr ""

#: lib/tokens/pushtoken.py:236
msgid "The title of the notification, the user sees on his mobile phone."
msgstr ""

#: lib/tokens/pushtoken.py:241
msgid "The smartphone needs to verify SSL during authentication. (default 1)"
msgstr ""

#: lib/tokens/pushtoken.py:359
msgid "URL for privacyIDEA Push Token"
msgstr ""

#: lib/tokens/questionnairetoken.py:89
msgid "Questionnaire: Enroll Questions for the user."
msgstr ""

#: lib/tokens/questionnairetoken.py:136
#, python-format
msgid "You need to provide at least %s answers."
msgstr ""

#: lib/tokens/radiustoken.py:100
msgid "RADIUS: Forward authentication request to a RADIUS server."
msgstr ""

#: lib/tokens/registrationtoken.py:122
msgid ""
"Registration: A token that creates a registration code that can be used "
"as a second factor once."
msgstr ""

#: lib/tokens/remotetoken.py:112
msgid "Remote Token: Forward authentication request to another server."
msgstr ""

#: lib/tokens/smstoken.py:196
msgid "SMS Token"
msgstr ""

#: lib/tokens/smstoken.py:198
msgid "SMS: Send a One Time Password to the users mobile phone."
msgstr ""

#: lib/tokens/smstoken.py:207
msgid ""
"The text that will be send via SMS for an SMS token. Use <otp> and "
"<serial> as parameters."
msgstr ""

#: lib/tokens/smstoken.py:212
msgid ""
"If set, a new SMS OTP will be sent after successful authentication with "
"one SMS OTP."
msgstr ""

#: lib/tokens/smstoken.py:217
msgid ""
"Use an alternate challenge text for telling the user to enter the code "
"from the SMS."
msgstr ""

#: lib/tokens/smstoken.py:225
msgid "Choose the gateways the administrator is allowed to set."
msgstr ""

#: lib/tokens/smstoken.py:233
msgid "Choose the gateways the user is allowed to set."
msgstr ""

#: lib/tokens/smstoken.py:307
msgid "Enter the OTP from the SMS:"
msgstr ""

#: lib/tokens/spasstoken.py:87
msgid "SPass: Simple Pass token. Static passwords."
msgstr ""

#: lib/tokens/sshkeytoken.py:84
msgid "SSH Public Key: The public SSH key."
msgstr ""

#: lib/tokens/tiqrtoken.py:152
msgid "TiQR: Enroll a TiQR token."
msgstr ""

#: lib/tokens/tiqrtoken.py:218
msgid "URL for TiQR enrollment"
msgstr ""

#: lib/tokens/tiqrtoken.py:364
msgid "Please scan the QR Code"
msgstr ""

#: lib/tokens/totptoken.py:114
msgid "TOTP: Time based One Time Passwords."
msgstr ""

#: lib/tokens/u2ftoken.py:249
msgid "This is a list of FQDN hostnames trusting the registered U2F tokens."
msgstr ""

#: lib/tokens/u2ftoken.py:253
msgid ""
"Use an alternate challenge text for telling the user to confirm with his "
"U2F device."
msgstr ""

#: lib/tokens/u2ftoken.py:260
msgid "Only specified U2F tokens are authorized."
msgstr ""

#: lib/tokens/u2ftoken.py:267
msgid "Only specified U2F tokens are allowed to be registered."
msgstr ""

#: lib/tokens/u2ftoken.py:272
msgid "Do not verify the U2F attestation certificate."
msgstr ""

#: lib/tokens/u2ftoken.py:349
msgid "You need to define the appId in the token config!"
msgstr ""

#: lib/tokens/u2ftoken.py:416
msgid "Please confirm with your U2F token ({0!s})"
msgstr ""

#: lib/tokens/vascotoken.py:100
msgid "VASCO Token: Authentication using VASCO tokens"
msgstr ""

#: lib/tokens/yubicotoken.py:102
msgid "Yubikey Cloud mode: Forward authentication request to YubiCloud."
msgstr ""

#: lib/tokens/yubikeytoken.py:160
msgid "Yubikey AES mode: One Time Passwords with Yubikey."
msgstr ""

