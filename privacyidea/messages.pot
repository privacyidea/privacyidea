# Translations template for PROJECT.
# Copyright (C) 2018 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2018-01-21 21:48+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: api/policy.py:171
msgid "The name of the policy may only contain the characters a-zA-Z0-9_."
msgstr ""

#: api/policy.py:175
msgid "T'check' is an invalid policy name."
msgstr ""

#: lib/decorators.py:42 lib/token.py:1946
msgid "This action is not possible, since the token is locked"
msgstr ""

#: lib/decorators.py:90
msgid "You need to specify a serial or a user."
msgstr ""

#: lib/error.py:168
msgid "You either need to provide user or serial"
msgstr ""

#: lib/policy.py:1003
msgid "Define in which resolver the user should be registered."
msgstr ""

#: lib/policy.py:1007
msgid "Define in which realm the user should be registered."
msgstr ""

#: lib/policy.py:1011
msgid ""
"The SMTP server configuration, that should be used to send the "
"registration email."
msgstr ""

#: lib/policy.py:1015
msgid ""
"Only users with this email address are allowed to register. This is a "
"regular expression."
msgstr ""

#: lib/policy.py:1020
msgid ""
"The body of the registration email. Use '{regkey}' as tagfor the "
"registration key."
msgstr ""

#: lib/policy.py:1026
msgid "Admin is allowed to enable tokens."
msgstr ""

#: lib/policy.py:1030
msgid "Admin is allowed to disable tokens."
msgstr ""

#: lib/policy.py:1034
msgid "Admin is allowed to set token properties."
msgstr ""

#: lib/policy.py:1039
msgid "Admin is allowed to set the OTP PIN of tokens."
msgstr ""

#: lib/policy.py:1045
msgid "Admin is allowed to manually set and delete token info."
msgstr ""

#: lib/policy.py:1049
msgid "Admin is allowed to set the OTP PIN during enrollment."
msgstr ""

#: lib/policy.py:1054
msgid "Admin is allowed to resync tokens."
msgstr ""

#: lib/policy.py:1058
msgid "Admin is allowed to reset the Failcounter of a token."
msgstr ""

#: lib/policy.py:1064
msgid "Admin is allowed to revoke a token"
msgstr ""

#: lib/policy.py:1068
msgid "Admin is allowed to assign a token to a user."
msgstr ""

#: lib/policy.py:1074
msgid "Admin is allowed to remove the token from a user, i.e. unassign a token."
msgstr ""

#: lib/policy.py:1081
msgid "Admin is allowed to import token files."
msgstr ""

#: lib/policy.py:1086
msgid "Admin is allowed to remove tokens from the database."
msgstr ""

#: lib/policy.py:1092
msgid "Admin is allowed to view the list of the users."
msgstr ""

#: lib/policy.py:1098
msgid "The Admin is allowed to list the machines."
msgstr ""

#: lib/policy.py:1103
msgid "The Admin is allowed to attach and detach tokens to machines."
msgstr ""

#: lib/policy.py:1110
msgid ""
"The Admin is allowed to fetch authentication items of tokens assigned to "
"machines."
msgstr ""

#: lib/policy.py:1115
msgid "Admin is allowed to manage the realms of a token."
msgstr ""

#: lib/policy.py:1120
msgid "Admin is allowed to retrieve a serial for a given OTP value."
msgstr ""

#: lib/policy.py:1125
msgid "Admin is allowed to retrieve random keys from privacyIDEA."
msgstr ""

#: lib/policy.py:1129
msgid "Admin is allowed to copy the PIN of one token to another token."
msgstr ""

#: lib/policy.py:1135
msgid ""
"Admin is allowed to copy the assigned user to another token, i.e. assign "
"a user ot another token."
msgstr ""

#: lib/policy.py:1142
msgid "Admin is allowed to trigger the lost token workflow."
msgstr ""

#: lib/policy.py:1148
msgid "Admin is allowed to write and modify the system configuration."
msgstr ""

#: lib/policy.py:1153
msgid "Admin is allowed to delete keys in the system configuration."
msgstr ""

#: lib/policy.py:1159
msgid ""
"Admin is allowed to export a documentation of the complete configuration "
"including resolvers and realm."
msgstr ""

#: lib/policy.py:1167
msgid "Admin is allowed to write and modify the policies."
msgstr ""

#: lib/policy.py:1172
msgid "Admin is allowed to delete policies."
msgstr ""

#: lib/policy.py:1177
msgid "Admin is allowed to write and modify the resolver and realm configuration."
msgstr ""

#: lib/policy.py:1184
msgid "Admin is allowed to delete resolvers and realms."
msgstr ""

#: lib/policy.py:1189
msgid ""
"Admin is allowed to create new CA Connector definitions and modify "
"existing ones."
msgstr ""

#: lib/policy.py:1195
msgid "Admin is allowed to delete CA Connector definitions."
msgstr ""

#: lib/policy.py:1200
msgid "Admin is allowed to write and modify the machine resolvers."
msgstr ""

#: lib/policy.py:1206
msgid "Admin is allowed to delete machine resolvers."
msgstr ""

#: lib/policy.py:1213 lib/policy.py:1374
msgid "Set the maximum allowed length of the OTP PIN."
msgstr ""

#: lib/policy.py:1218 lib/policy.py:1379
msgid "Set the minimum required length of the OTP PIN."
msgstr ""

#: lib/policy.py:1222 lib/policy.py:1383
msgid ""
"Specifiy the required contents of the OTP PIN. (c)haracters, (n)umeric, "
"(s)pecial, (o)thers. [+/-]!"
msgstr ""

#: lib/policy.py:1228
msgid "Admin is allowed to view the Audit log."
msgstr ""

#: lib/policy.py:1232
msgid "The admin will only see audit entries of the last 10d, 3m or 2y."
msgstr ""

#: lib/policy.py:1237
msgid "The admin is allowed to download the complete auditlog."
msgstr ""

#: lib/policy.py:1242
msgid "Admin is allowed to add users in a userstore/UserIdResolver."
msgstr ""

#: lib/policy.py:1247
msgid "Admin is allowed to update the users data in a userstore."
msgstr ""

#: lib/policy.py:1252
msgid "Admin is allowed to delete a user object in a userstore."
msgstr ""

#: lib/policy.py:1257
msgid "Admin is allowed to set the password of the HSM/Security Module."
msgstr ""

#: lib/policy.py:1261
msgid "Admin is allowed to retrieve the list of active challenges."
msgstr ""

#: lib/policy.py:1267
msgid "Admin is allowed to write new SMTP server definitions."
msgstr ""

#: lib/policy.py:1272
msgid "Admin is allowed to write new RADIUS server definitions."
msgstr ""

#: lib/policy.py:1278
msgid "Admin is allowed to write remote privacyIDEA server definitions."
msgstr ""

#: lib/policy.py:1285
msgid "Admin is allowed to write and modify the event handling configuration."
msgstr ""

#: lib/policy.py:1291
msgid "Admin is allowed to write and modify SMS gateway definitions."
msgstr ""

#: lib/policy.py:1297
msgid "Admin is allowed to get the list of authenticated clients and their types."
msgstr ""

#: lib/policy.py:1304
msgid "Admin is allowed to add and delete component subscriptions."
msgstr ""

#: lib/policy.py:1310
msgid "The Admin is allowed to trigger a challenge for e.g. SMS OTP token."
msgstr ""

#: lib/policy.py:1320
msgid ""
"The user is allowed to assign an existing token that is not yet assigned "
"using the token serial number."
msgstr ""

#: lib/policy.py:1326
msgid "The user is allowed to disable his own tokens."
msgstr ""

#: lib/policy.py:1332
msgid "The user is allowed to enable his own tokens."
msgstr ""

#: lib/policy.py:1338
msgid "The user is allowed to delete his own tokens."
msgstr ""

#: lib/policy.py:1344
msgid "The user is allowed to unassign his own tokens."
msgstr ""

#: lib/policy.py:1349
msgid "The user is allowed to resyncronize his tokens."
msgstr ""

#: lib/policy.py:1354
msgid "The user is allowed to revoke a token"
msgstr ""

#: lib/policy.py:1359
msgid "The user is allowed to reset the failcounter of his tokens."
msgstr ""

#: lib/policy.py:1364
msgid "The user is allowed to set the OTP PIN of his tokens."
msgstr ""

#: lib/policy.py:1369
msgid "The user is allowed to set the OTP PIN during enrollment."
msgstr ""

#: lib/policy.py:1391
msgid "Allow the user to view his own token history."
msgstr ""

#: lib/policy.py:1394
msgid "The user will only see audit entries of the last 10d, 3m or 2y."
msgstr ""

#: lib/policy.py:1398
msgid "The user is allowed to view his own user information."
msgstr ""

#: lib/policy.py:1402
msgid ""
"The user is allowed to update his own user information, like changing his"
" password."
msgstr ""

#: lib/policy.py:1407
msgid "The user is allowed to do a password reset in an editable UserIdResolver."
msgstr ""

#: lib/policy.py:1416
msgid "Limit the number of allowed tokens in a realm."
msgstr ""

#: lib/policy.py:1420
msgid "Limit the number of tokens a user may have assigned."
msgstr ""

#: lib/policy.py:1426
msgid "Set a random OTP PIN with this length for a token."
msgstr ""

#: lib/policy.py:1431
msgid "In case of a random OTP PIN use this python module to process the PIN."
msgstr ""

#: lib/policy.py:1436
msgid ""
"If the administrator sets the OTP PIN during enrollment or later, the "
"user will have to change the PIN during first use."
msgstr ""

#: lib/policy.py:1443
msgid ""
"The user needs to change his PIN on a regular basis. To change the PIN "
"every 180 days, enter '180d'."
msgstr ""

#: lib/policy.py:1450
msgid ""
"The OTP PIN can be hashed or encrypted. Hashing the PIN is the default "
"behaviour."
msgstr ""

#: lib/policy.py:1455
msgid ""
"Set label for a new enrolled Google Authenticator. Possible tags are <u> "
"(user), <r> (realm), <s> (serial)."
msgstr ""

#: lib/policy.py:1461
msgid "This is the issuer label for new enrolled Google Authenticators."
msgstr ""

#: lib/policy.py:1468
msgid ""
"Users can assign a token just by using the unassigned token to "
"authenticate."
msgstr ""

#: lib/policy.py:1474
msgid "The length of the password in case of temporary token (lost token)."
msgstr ""

#: lib/policy.py:1478
msgid ""
"The contents of the temporary password, described by the characters C, c,"
" n, s."
msgstr ""

#: lib/policy.py:1483
msgid "The length of the validity for the temporary token (in days)."
msgstr ""

#: lib/policy.py:1491
msgid ""
"Either use the Token PIN , use the Userstore Password or use no fixed "
"password component."
msgstr ""

#: lib/policy.py:1496
msgid ""
"This is a whitespace separated list of tokentypes, that can be used with "
"challenge response."
msgstr ""

#: lib/policy.py:1502
msgid ""
"If set, the user in this realm will be authenticated against the "
"userstore or against the given RADIUS config, if the user has no tokens "
"assigned."
msgstr ""

#: lib/policy.py:1509
msgid ""
"If the user has no token, the authentication request for this user will "
"always be true."
msgstr ""

#: lib/policy.py:1514
msgid ""
"If the user user does not exist, the authentication request for this non-"
"existing user will always be true."
msgstr ""

#: lib/policy.py:1520
msgid ""
"Can be used to modify the parameters pass, user and realm in an "
"authentication request. See the documentation for an example."
msgstr ""

#: lib/policy.py:1526
msgid ""
"If a user authenticates successfully reset the failcounter of all of his "
"tokens."
msgstr ""

#: lib/policy.py:1531
msgid ""
"Cache the password used for authentication and allow authentication with "
"the same credentials for a certain amount of time. Specify timeout like "
"4h or 4h/5m."
msgstr ""

#: lib/policy.py:1540
msgid ""
"You can specify how many successful authentication requests a user is "
"allowed to do in a given time. Specify like 1/5s, 2/10m, 10/1h - s, m, h "
"being second, minute and hour."
msgstr ""

#: lib/policy.py:1547
msgid ""
"You can specify how many failed authentication requests a user is allowed"
" to do in a given time. Specify like 1/5s, 2/10m, 10/1h - s, m, h being "
"second, minute and hour."
msgstr ""

#: lib/policy.py:1554
msgid ""
"You can specify in which time frame the user needs to authenticate again "
"with this token. If the user authenticates later, authentication will "
"fail. Specify like 30h, 7d or 1y."
msgstr ""

#: lib/policy.py:1561
msgid "The user will only be authenticated with this very tokentype."
msgstr ""

#: lib/policy.py:1565
msgid ""
"The user will only be authenticated if the serial number of the token "
"matches this regexp."
msgstr ""

#: lib/policy.py:1569
msgid ""
"The user will only be authenticated if the tokeninfo field matches the "
"regexp. key/<regexp>/"
msgstr ""

#: lib/policy.py:1574
msgid ""
"The Realm of the user is set to this very realm. This is important if the"
" user is not contained in the default realm and can not pass his realm."
msgstr ""

#: lib/policy.py:1579
msgid ""
"In case of successful authentication additional no detail information "
"will be returned."
msgstr ""

#: lib/policy.py:1583
msgid ""
"In case of failed authentication additional no detail information will be"
" returned."
msgstr ""

#: lib/policy.py:1587
msgid ""
"In case of successful authentication user data will be added in the "
"detail branch of the authentication response."
msgstr ""

#: lib/policy.py:1592
msgid ""
"In case of successful authentication the user resolver and realm will be "
"added in the detail branch of the authentication response."
msgstr ""

#: lib/policy.py:1597
msgid ""
"The sending of an API Auth Key is required duringauthentication. This "
"avoids rogue authenticate requests against the /validate/check interface."
msgstr ""

#: lib/policy.py:1606
msgid ""
"If set to \"privacyIDEA\" the users and admins need to authenticate "
"against privacyIDEA when they log in to the Web UI. Defaults to "
"\"userstore\""
msgstr ""

#: lib/policy.py:1615
msgid ""
"When searching in the user list, the search will only performed when "
"pressing enter."
msgstr ""

#: lib/policy.py:1620
msgid ""
"The action taken when a user is idle beyond the logout_time limit. "
"Defaults to \"lockscreen\"."
msgstr ""

#: lib/policy.py:1628
msgid ""
"The REMOTE_USER set by the webserver can be used to login to privacyIDEA "
"or it will be ignored. Defaults to \"disable\"."
msgstr ""

#: lib/policy.py:1634
msgid ""
"Set the time in seconds after which the user will be logged out from the "
"WebUI. Default: 120"
msgstr ""

#: lib/policy.py:1639
msgid "Set how many tokens should be displayed in the token view on one page."
msgstr ""

#: lib/policy.py:1644
msgid "Set how many users should be displayed in the user view on one page."
msgstr ""

#: lib/policy.py:1649
msgid "Use your own html template for the web UI menu."
msgstr ""

#: lib/policy.py:1653
msgid "Use your own html template for the web UI baseline/footer."
msgstr ""

#: lib/policy.py:1657
msgid ""
"Whether the user ID and the resolver should be displayed in the token "
"list."
msgstr ""

#: lib/policy.py:1662
msgid ""
"The URL of a repository, where the policy templates can be found.  "
"(Default https: //raw.githubusercontent.com/ privacyidea/policy-templates"
" /master/templates/)"
msgstr ""

#: lib/policy.py:1669
msgid "As long as a user has no token, he will only see a token wizard in the UI."
msgstr ""

#: lib/policy.py:1674
msgid ""
"The tokenwizard will be displayed in the token menu, even if the user "
"already has a token."
msgstr ""

#: lib/policy.py:1679
msgid "This is the default token type in the token enrollment dialog."
msgstr ""

#: lib/policy.py:1685
msgid ""
"A comma separated list of realm names, which are displayed in a drop down"
" menu in the WebUI login screen."
msgstr ""

#: lib/policy.py:1691
msgid ""
"If this checked, the administrator will not see the welcome dialog "
"anymore."
msgstr ""

#: lib/radiusserver.py:200
msgid "The RADIUS secret is too long"
msgstr ""

#: lib/token.py:2195
#, python-format
msgid "Admin is allowed to initalize %s tokens."
msgstr ""

#: lib/token.py:2204
#, python-format
msgid "The user is allowed to enroll a %s token."
msgstr ""

#: lib/token.py:2235
msgid "Set the maximum allowed PIN length of the {0!s} token."
msgstr ""

#: lib/token.py:2242
msgid "Set the minimum required PIN length of the {0!s} token."
msgstr ""

#: lib/token.py:2248
msgid ""
"Specifiy the required PIN contents of the {0!s} token. (c)haracters, "
"(n)umeric, (s)pecial, (o)thers. [+/-]!"
msgstr ""

#: lib/eventhandler/base.py:113
msgid "The user realm, for which this event should apply."
msgstr ""

#: lib/eventhandler/base.py:118
msgid "The token realm, for which this event should apply."
msgstr ""

#: lib/eventhandler/base.py:124
msgid "The type of the token."
msgstr ""

#: lib/eventhandler/base.py:129
msgid "The logged in user is of the following type."
msgstr ""

#: lib/eventhandler/base.py:134
msgid "The result.value within the response is True or False."
msgstr ""

#: lib/eventhandler/base.py:140
msgid "Check if the max failcounter of the token is reached."
msgstr ""

#: lib/eventhandler/base.py:146
msgid "The token has a user assigned."
msgstr ""

#: lib/eventhandler/base.py:151
msgid ""
"The token has a user assigned, but the user does not exist in the "
"userstore anymore."
msgstr ""

#: lib/eventhandler/base.py:157
msgid "Check if the token is within its validity period."
msgstr ""

#: lib/eventhandler/base.py:162
msgid "Action is triggered, if the serial matches this regular expression."
msgstr ""

#: lib/eventhandler/base.py:167
msgid "Action is triggered, if the user has this number of tokens assigned."
msgstr ""

#: lib/eventhandler/base.py:172
msgid "Action is triggered, if the counter of the token equals this setting."
msgstr ""

#: lib/eventhandler/base.py:177
msgid ""
"Action is triggered, if the last authentication of the token is older "
"than 7h, 10d or 1y."
msgstr ""

#: lib/eventhandler/base.py:182
msgid ""
"This can be '>100', '<99', or '=100', to trigger the action, if the "
"tokeninfo field 'count_auth' is bigger than 100, less than 99 or exactly "
"100."
msgstr ""

#: lib/eventhandler/base.py:188
msgid ""
"This can be '>100', '<99', or '=100', to trigger the action, if the "
"tokeninfo field 'count_auth_success' is bigger than 100, less than 99 or "
"exactly 100."
msgstr ""

#: lib/eventhandler/base.py:195
msgid ""
"This can be '>100', '<99', or '=100', to trigger the action, if the "
"difference between the tokeninfo field 'count_auth' and "
"'count_auth_success is bigger than 100, less than 99 or exactly 100."
msgstr ""

#: lib/eventhandler/base.py:202
msgid ""
"This condition can check any arbitrary tokeninfo field. You need to enter"
" something like '<fieldname> == <fieldvalue>', '<fieldname> > "
"<fieldvalue>' or '<fieldname> < <fieldvalue>'"
msgstr ""

#: lib/eventhandler/base.py:209
msgid ""
"Here you can enter a regular expression. The condition only applies if "
"the regular expression matches the detail->error->message in the "
"response."
msgstr ""

#: lib/eventhandler/base.py:215
msgid ""
"Here you can enter a regular expression. The condition only applies if "
"the regular expression matches the detail->message in the response."
msgstr ""

#: lib/eventhandler/federationhandler.py:73
msgid "The remote/child privacyIDEA Server."
msgstr ""

#: lib/eventhandler/federationhandler.py:78
msgid "Change the realm name to a realm on the child privacyIDEA system."
msgstr ""

#: lib/eventhandler/federationhandler.py:84
msgid "Change the resolver name to a resolver on the child privacyIDEA system."
msgstr ""

#: lib/eventhandler/federationhandler.py:90
msgid ""
"Forward the client IP to the child privacyIDEA server. Otherwise this "
"server will be the client."
msgstr ""

#: lib/eventhandler/federationhandler.py:97
msgid ""
"Forward the authorization header. This allows to also forward request "
"like token- and system-requests."
msgstr ""

#: lib/eventhandler/scripthandler.py:77
msgid "Add '--serial <serial number>' as script parameter."
msgstr ""

#: lib/eventhandler/scripthandler.py:82
msgid "Add '--user <username>' as script parameter."
msgstr ""

#: lib/eventhandler/scripthandler.py:87
msgid "Add '--realm <realm>' as script parameter."
msgstr ""

#: lib/eventhandler/scripthandler.py:92
msgid ""
"Add the username of the logged in user as script parameter like '--"
"logged_in_user <username>'."
msgstr ""

#: lib/eventhandler/scripthandler.py:98
msgid ""
"Add the role (either admin or user) of the logged in user as script "
"parameter like '--logged_in_role <role>'."
msgstr ""

#: lib/eventhandler/tokenhandler.py:108
msgid "set a new realm of the token"
msgstr ""

#: lib/eventhandler/tokenhandler.py:112
msgid ""
"The new realm will be the only realm of the token. I.e. all other realms "
"will be removed from this token. Otherwise the realm will be added to the"
" token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:127
msgid "Token type to create"
msgstr ""

#: lib/eventhandler/tokenhandler.py:132
msgid "Assign token to user in request or to tokenowner."
msgstr ""

#: lib/eventhandler/tokenhandler.py:137
msgid "Set the realm of the newly created token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:144
msgid ""
"Set the MOTP PIN of the MOTP token during enrollment. This is a required "
"value for enrolling MOTP tokens."
msgstr ""

#: lib/eventhandler/tokenhandler.py:153
msgid "The new description of the token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:160
msgid ""
"The token will be valid starting at the given date. Can be a fixed date "
"or an offset like +10m, +24h, +7d."
msgstr ""

#: lib/eventhandler/tokenhandler.py:167
msgid ""
"The token will be valid until the given date. Can be a fixed date or an "
"offset like +10m, +24h, +7d."
msgstr ""

#: lib/eventhandler/tokenhandler.py:180
msgid "Set the new count window of the token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:190
msgid "Set the failcounter of the token."
msgstr ""

#: lib/eventhandler/tokenhandler.py:199
msgid "Set this tokeninfo key."
msgstr ""

#: lib/eventhandler/tokenhandler.py:204
msgid "Set the above key the this value."
msgstr ""

#: lib/eventhandler/usernotification.py:105
msgid "Send notification email via this email server."
msgstr ""

#: lib/eventhandler/usernotification.py:110
msgid "Either send email as plain text or HTML."
msgstr ""

#: lib/eventhandler/usernotification.py:115
msgid "The subject of the mail that is sent."
msgstr ""

#: lib/eventhandler/usernotification.py:120
msgid "The Reply-To header in the sent email."
msgstr ""

#: lib/eventhandler/usernotification.py:125
msgid "The body of the mail that is sent."
msgstr ""

#: lib/eventhandler/usernotification.py:130
#: lib/eventhandler/usernotification.py:173
msgid "Send notification to this user."
msgstr ""

#: lib/eventhandler/usernotification.py:153
msgid "Any email address, to which the notification should be sent."
msgstr ""

#: lib/eventhandler/usernotification.py:162
msgid "Send the user notification via a predefined SMS gateway."
msgstr ""

#: lib/eventhandler/usernotification.py:169
msgid "The text of the SMS."
msgstr ""

#: lib/machines/ldap.py:338
#, python-format
msgid "Your LDAP config seems to be OK, %i machine objects found."
msgstr ""

#: lib/resolvers/LDAPIdResolver.py:859
#, python-format
msgid ""
"Your LDAP config found %i user objects, but only %i with the specified "
"uidtype"
msgstr ""

#: lib/resolvers/LDAPIdResolver.py:861
#, python-format
msgid "Your LDAP config seems to be OK, %i user objects found."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:219
msgid "The base URL of the HTTP Gateway"
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:222
msgid "Should the HTTP Gateway be connected via an HTTP GET or POST request."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:227
msgid ""
"Specify a substring, that indicates, that the SMS was delivered "
"successfully."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:231
msgid "Specify a substring, that indicates, that the SMS failed to be delivered."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:235
msgid "Username in case of basic authentication."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:239
msgid "Password in case of basic authentication."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:243
msgid "Should the SSL certificate be verified."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:247
msgid ""
"An optional proxy string. DEPRECATED. Do not usethis anymore. Rather use "
"HTTP_PROXY for http connections andHTTPS_PROXY for https connection. The "
"PROXY option will beremoved in future."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:251
msgid "Proxy setting for HTTP connections."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:252
msgid "Proxy setting for HTTPS connections."
msgstr ""

#: lib/smsprovider/HttpSMSProvider.py:253
msgid "The timeout in seconds."
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:125
msgid "SMSC Host IP"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:128
msgid "SMSC Port"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:130
msgid "SMSC Service ID"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:132
msgid "Password for authentication on SMSC"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:134
msgid "SOURCE_ADDR_TON Special Flag"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:136
msgid "S_ADDR_NPI Special Flag"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:138
msgid "Source address (SMS sender)"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:139
msgid "DESTINATION_ADDR_TON Special Flag"
msgstr ""

#: lib/smsprovider/SmppSMSProvider.py:140
msgid "D_ADDR_NPI Special Flag"
msgstr ""

#: lib/tokens/certificatetoken.py:151
msgid "Certificate: Enroll an x509 Certificate Token."
msgstr ""

#: lib/tokens/daplugtoken.py:113
msgid "event based OTP token using the HOTP algorithm"
msgstr ""

#: lib/tokens/emailtoken.py:135
msgid "EMail Token"
msgstr ""

#: lib/tokens/emailtoken.py:137
msgid "EMail: Send a One Time Password to the users email address."
msgstr ""

#: lib/tokens/emailtoken.py:145
msgid ""
"The text that will be sent via EMail for an EMail token. Use <otp> and "
"<serial> as parameters. You may also specify a filename as email template"
" starting with \"file:\"."
msgstr ""

#: lib/tokens/emailtoken.py:151
msgid ""
"The subject of the EMail for an EMail token. Use <otp> and <serial> as "
"parameters."
msgstr ""

#: lib/tokens/emailtoken.py:156
msgid ""
"If set, a new EMail OTP will be sent after successful authentication with"
" one EMail OTP."
msgstr ""

#: lib/tokens/foureyestoken.py:123
msgid "4Eyes Token: Use tokens of two or more users to authenticate"
msgstr ""

#: lib/tokens/hotptoken.py:112
msgid "Specify the hashlib to be used. Can be sha1 (1) or sha2-256 (2)."
msgstr ""

#: lib/tokens/hotptoken.py:114
msgid "Specify the otplen to be used. Can be 6 or 8 digits."
msgstr ""

#: lib/tokens/hotptoken.py:115 lib/tokens/totptoken.py:140
msgid "Specify whether users are allowed or forced to use two-step enrollment."
msgstr ""

#: lib/tokens/hotptoken.py:117 lib/tokens/totptoken.py:146
msgid "Specify whether admins are allowed or forced to use two-step enrollment."
msgstr ""

#: lib/tokens/hotptoken.py:121
msgid "HOTP: Event based One Time Passwords."
msgstr ""

#: lib/tokens/hotptoken.py:129
msgid "The Yubikey access code used to initialize Yubikeys."
msgstr ""

#: lib/tokens/hotptoken.py:133 lib/tokens/totptoken.py:152
msgid "The size of the OTP seed part contributed by the client (in bytes)"
msgstr ""

#: lib/tokens/hotptoken.py:137 lib/tokens/totptoken.py:155
msgid "The size of the OTP seed part contributed by the server (in bytes)"
msgstr ""

#: lib/tokens/hotptoken.py:141 lib/tokens/totptoken.py:158
msgid ""
"The difficulty factor used for the OTP seed generation (should be at "
"least 10000)"
msgstr ""

#: lib/tokens/hotptoken.py:155 lib/tokens/totptoken.py:135
msgid "Force the key to be generated on the server."
msgstr ""

#: lib/tokens/hotptoken.py:229
msgid "URL for google Authenticator"
msgstr ""

#: lib/tokens/hotptoken.py:243
msgid "URL for OATH token"
msgstr ""

#: lib/tokens/motptoken.py:139
msgid "URL for MOTP token"
msgstr ""

#: lib/tokens/ocratoken.py:94
msgid "OCRA: Enroll an OCRA token."
msgstr ""

#: lib/tokens/papertoken.py:108
msgid "The number of OTP values, which are printed on the paper."
msgstr ""

#: lib/tokens/passwordtoken.py:90
msgid ""
"A token with a fixed password. Can be combined  with the OTP PIN. Is used"
" for the lost token scenario."
msgstr ""

#: lib/tokens/questionnairetoken.py:89
msgid "Questionnaire: Enroll Questions for the user."
msgstr ""

#: lib/tokens/questionnairetoken.py:136
#, python-format
msgid "You need to provide at least %s answers."
msgstr ""

#: lib/tokens/radiustoken.py:97
msgid "RADIUS: Forward authentication request to a RADIUS server."
msgstr ""

#: lib/tokens/registrationtoken.py:120
msgid ""
"Registration: A token that creates a registration code that can be used "
"as a second factor once."
msgstr ""

#: lib/tokens/remotetoken.py:109
msgid "Remote Token: Forward authentication request to another server."
msgstr ""

#: lib/tokens/smstoken.py:185
msgid "SMS Token"
msgstr ""

#: lib/tokens/smstoken.py:187
msgid "SMS: Send a One Time Password to the users mobile phone."
msgstr ""

#: lib/tokens/smstoken.py:196
msgid ""
"The text that will be send via SMS for an SMS token. Use <otp> and "
"<serial> as parameters."
msgstr ""

#: lib/tokens/smstoken.py:201
msgid ""
"If set, a new SMS OTP will be sent after successful authentication with "
"one SMS OTP."
msgstr ""

#: lib/tokens/spasstoken.py:87
msgid "SPass: Simple Pass token. Static passwords."
msgstr ""

#: lib/tokens/sshkeytoken.py:84
msgid "SSH Public Key: The public SSH key."
msgstr ""

#: lib/tokens/tiqrtoken.py:151
msgid "TiQR: Enroll a TiQR token."
msgstr ""

#: lib/tokens/tiqrtoken.py:219
msgid "URL for TiQR enrollment"
msgstr ""

#: lib/tokens/totptoken.py:114
msgid "TOTP: Time based One Time Passwords."
msgstr ""

#: lib/tokens/u2ftoken.py:243
msgid "This is a list of FQDN hostnames trusting the registered U2F tokens."
msgstr ""

#: lib/tokens/u2ftoken.py:249
msgid "Only specified U2F tokens are authorized."
msgstr ""

#: lib/tokens/u2ftoken.py:256
msgid "Only specified U2F tokens are allowed to be registered."
msgstr ""

#: lib/tokens/u2ftoken.py:331
msgid "You need to define the appId in the token config!"
msgstr ""

#: lib/tokens/vascotoken.py:100
msgid "VASCO Token: Authentication using VASCO tokens"
msgstr ""

#: lib/tokens/yubicotoken.py:97
msgid "Yubikey Cloud mode: Forward authentication request to YubiCloud."
msgstr ""

#: lib/tokens/yubikeytoken.py:159
msgid "Yubikey AES mode: One Time Passwords with Yubikey."
msgstr ""

