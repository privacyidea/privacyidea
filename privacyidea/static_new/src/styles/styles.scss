@use "sass:meta";
@use "@angular/material" as mat;
@use "theme";
@use "material-icons/iconfont/material-icons.scss";

@include meta.load-css("table.scss");
@include meta.load-css("buttons.scss");
@include meta.load-css("inputs.scss");
@include meta.load-css("tab.scss");
@include meta.load-css("info.scss");
@include meta.load-css("dialog.scss");
@include meta.load-css("enroll.scss");
@include meta.load-css("panel.scss");

html,
body {
  background: var(--mat-sys-background);
  font-family: "Roboto", sans-serif;
  margin: 0;
  overflow: hidden;
}

@font-face {
  font-family: "Roboto";
  src: url("fonts/Roboto-VariableFont_wdth,wght.ttf") format("truetype");
  font-weight: 100 900;
  font-style: normal;
}

@font-face {
  font-family: "Roboto";
  src: url("fonts/static/Roboto-Bold.ttf") format("truetype");
  font-weight: 700;
  font-style: normal;
}

:root {
  --blur: 4px;
  --border-radius: 4px;
  --light-distance: -4px;
  --shadow-distance: 2px;

  --double-global-padding: calc(var(--global-padding) * 2);
  --global-padding: 20px;
  --three-quarters-global-padding: calc(var(--global-padding) * 0.75);
  --half-global-padding: calc(var(--global-padding) / 2);
  --third-global-padding: calc(var(--global-padding) / 3);
  --quarter-global-padding: calc(var(--global-padding) / 4);
  --eighth-global-padding: calc(var(--global-padding) / 8);

  --global-gap: 16px;

  --light: #f3f3f3;

  --green-brand-base: hsl(72, 100%, 32%);
  --green-brand-light: hsl(72, 100%, 37%);
  --background-green-brand: linear-gradient(145deg, var(--green-brand-light), var(--green-brand-base));

  --box-shadow: var(--shadow-distance) var(--shadow-distance) var(--blur) var(--mat-sys-shadow),
    var(--light-distance) var(--light-distance) var(--blur) var(--mat-sys-light);
  --box-shadow-white: var(--shadow-distance) var(--shadow-distance) var(--blur) var(--mat-sys-shadow),
    var(--light-distance) var(--light-distance) var(--blur) var(--mat-sys-light);
  --box-shadow-inset: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--mat-sys-shadow),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--mat-sys-light);

  --background-blue: linear-gradient(145deg, var(--mat-sys-primary-dark), var(--mat-sys-primary));
  --background-blue-inset: linear-gradient(145deg, var(--mat-sys-primary-light-active), var(--mat-sys-primary-light));
  --box-shadow-blue: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--mat-sys-primary-light-active),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--mat-sys-primary-dark);
  --box-shadow-blue-inset: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--mat-sys-primary-dark),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--mat-sys-primary-light-active);

  --background-green: linear-gradient(145deg, var(--green-base), var(--green-light));
  --background-green-inset: linear-gradient(145deg, var(--green-light), var(--green-base));
  --box-shadow-green: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--green-light-active),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--green-dark);
  --box-shadow-green-inset: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--green-dark),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--green-light-active);

  --background-red: linear-gradient(145deg, var(--red-base), var(--red-light));
  --background-red-inset: linear-gradient(145deg, var(--red-light), var(--red-base));
  --box-shadow-red: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--red-light-active),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--red-dark);
  --box-shadow-red-inset: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--red-dark),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--red-light-active);

  --background-yellow: linear-gradient(145deg, var(--yellow-base), var(--yellow-light));
  --background-yellow-inset: linear-gradient(145deg, var(--yellow-light), var(--yellow-base));

  --background-gray: linear-gradient(145deg, var(--grey-base), var(--grey-light));
  --background-gray-inset: linear-gradient(145deg, var(--grey-light), var(--grey-base));

  --box-shadow-gray: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--grey-light-active),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--grey-dark);
  --box-shadow-gray-inset: inset var(--shadow-distance) var(--shadow-distance) var(--blur) var(--grey-dark),
    inset var(--light-distance) var(--light-distance) var(--blur) var(--grey-light-active);

  --box-shadow-header: 4px 2px var(--blur) var(--mat-sys-shadow);
  --box-dialog-shadow: 0px 4px 20px var(--mat-sys-shadow-color-high);
  --table-color: var(--mat-sys-surface-container-lowest);

  --mdc-filled-text-field-container-color: var(surface-container-low);
  --mdc-tab-indicator-active-indicator-color: var(--mat-sys-primary);
  --mdc-filled-text-field-focus-active-indicator-color: var(---mat-sys-primary-light);
  --mat-tab-header-active-focus-indicator-color: var(--mat-sys-primary);
  --mat-tab-header-active-ripple-color: white;
  --mat-tab-header-inactive-ripple-color: white;
  --mat-select-focused-arrow-color: var(--mat-sys-primary-light);
  --mdc-outlined-text-field-focus-outline-color: var(--mat-sys-primary-light);
}

.shadow {
  color: var(--mat-sys-shadow);
}

.on-surface {
  color: var(--mat-sys-on-surface);
}

.surface-highest {
  color: var(--mat-sys-surface-container-highest);
}

.bold {
  font-weight: bold;
}

.red {
  color: var(--red-base);
}

.red-light {
  color: var(--red-light);
}

.red-light-active {
  color: var(--red-light-active);
}

.green {
  color: var(--green-base);
}

.green-light {
  color: var(--green-light);
}

.green-light-active {
  color: var(--green-light-active);
}

.yellow {
  color: var(--yellow-base);
}

.yellow-light {
  color: var(--yellow-light);
}

.yellow-light-active {
  color: var(--yellow-light-active);
}

.blue-base {
  color: var(--mat-sys-primary);
}

.ali-center {
  align-items: center;
}

.just-center {
  justify-content: center;
}

.flex {
  display: flex;
}

.flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

.flex-center-vertical {
  display: flex;
  align-items: center;
}

.flex-center-horizontal {
  display: flex;
  justify-content: center;
}

.flex-top-center {
  display: flex;
  align-items: flex-start;
  justify-content: center;
}

.flex-size-none {
  flex: none;
}

.flex-size-1 {
  flex: 1;
}

.flex-size-2 {
  flex: 2;
}

.flex-size-3 {
  flex: 3;
}

.flex-size-5 {
  flex: 5;
}

.flex-size-8 {
  flex: 8;
}

.flex-size-auto {
  flex: auto;
}

.width-288px {
  width: 288px;
}

.font-14 {
  font-size: 14px;
}

.text-center {
  text-align: center;
}

.flex-just-start {
  display: flex;
  justify-content: flex-start;
}

.mat-mdc-input-element {
  font-size: 14px;
}

.gap-20 {
  gap: 20px;
}

.pad-0 {
  padding: 0 !important;
}

.margin-left-2 {
  margin-left: 32px;
}

.margin-left-1 {
  margin-left: 16px;
}

.margin-top-1 {
  margin-top: 16px;
}

.margin-top-2 {
  margin-top: 32px;
}

.margin-bottom-1 {
  margin-bottom: 16px;
}

.width-32 {
  width: 32%;
}

.width-33 {
  width: 33%;
}

.width-66 {
  width: 66%;
}

.width-50 {
  width: 50%;
}

.width-100 {
  width: 100%;
}

.height-auto {
  height: auto;
}

.gap-1 {
  gap: 16px;
}

.margin-1 {
  margin: 16px;
}

.overflow {
  overflow: auto;
}

.padding-32 {
  padding: 32px;
}

.max-width-96 {
  max-width: 96vw;
}

.margin-left-64 {
  margin-left: 64px;
}

.copy-button {
  background: unset;
  border: unset;
  cursor: pointer;
}

.copy-icon {
  font-size: 16px;
  align-items: center;
  display: flex !important;
  justify-content: center;
  color: #d0d0d0;
}

::ng-deep {
  .mdc-snackbar {
    margin-bottom: 76px !important;
  }

  .mat-mdc-icon-button {
    display: flex;
    align-items: center;
  }

  .cdk-overlay-pane.mat-mdc-dialog-panel {
    max-width: unset;
  }

  .mat-divider {
    border-top-color: #e0e2ec !important;
  }
}

.content-layout {
  max-width: 100vw;
}

.hidden {
  visibility: hidden;
}

::ng-deep {
  .multi-column-panel.mat-mdc-select-panel {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    max-height: unset;
    column-gap: var(--third-global-padding);
    padding: var(--three-quarters-global-padding);
    padding-bottom: var(--global-padding);
    overflow-y: auto;
  }
}

.single-column-panel.mat-mdc-select-panel {
  max-height: unset;
  padding: var(--three-quarters-global-padding);
  padding-bottom: var(--global-padding);
  overflow-y: auto;
}

.select-option {
  @include mat.elevation(3);
  border-radius: var(--border-radius);
  margin: 0 0 var(--third-global-padding) 0;
}

.sticky-header {
  position: sticky;
  top: 0;
  z-index: 100;
  background-color: var(--mat-sys-surface-container-lowest);
  padding: 16px;
  transition: box-shadow 0.3s ease-in-out;
}

.sticky-header.is-sticky {
  @include mat.elevation(3);
}

.sticky-controls {
  display: flex;
  align-items: center;
  gap: var(--global-gap);
}

.sticky-controls .mat-mdc-form-field {
  flex-grow: 1;
  width: 100%;
}
