# This workflow will check for changed files, install Python dependencies and
# run tests with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Tests

on:
  # run on each push to every branch of the repository but only on
  # pull requests to the 'master' and 'branch-*' branches
  push:
  pull_request:
    branches:
      - 'master'
      - 'branch-*'

jobs:
  pre_check:
    name: 'Check for code changes'
    runs-on: ubuntu-latest
    outputs:
      run_tests: ${{ steps.check.outputs.run_tests}}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
#    - name: Dump GitHub context
#      env:
#        GITHUB_CONTEXT: ${{ toJson(github) }}
#      run: echo "$GITHUB_CONTEXT"
    - name: 'Get changed file list'
      id: list
      run: |
        if [[ -n "${GITHUB_BASE_REF}" ]]; then
          # this is a pull request. We need the base branch to compare.
          git fetch origin ${GITHUB_BASE_REF} --depth=1
          export DIFF=$( git diff --name-only --diff-filter=AM origin/${GITHUB_BASE_REF} ${GITHUB_SHA} )
        else
          # this is a push event.
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            # this is the first commit in a branch
            export DIFF=$( git diff --name-only --diff-filter=AM HEAD^1 ${GITHUB_SHA} )
          else
            git fetch origin ${{ github.event.before }} --depth=1
            export DIFF=$( git diff --name-only --diff-filter=AM ${{ github.event.before }} $GITHUB_SHA )
          fi
        fi
        echo "Changed files: $DIFF"
        # Escape newlines (replace \n with %0A)
        echo "::set-output name=diff::$( echo "$DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )"
    - name: 'Check for changes in sources'
      id: check
      env:
        DIFF: ${{ steps.list.outputs.diff }}
      run: ./.github/check_for_changes.sh

  build:
    name: 'Run tests with Python'
    needs: pre_check
    if: needs.pre_check.outputs.run_tests == 'true'
    runs-on: ubuntu-18.04
    strategy:
      # don't cancel running matrix tests when one test fails
      fail-fast: false
      matrix:
        # current supported Python versions (and 2.7 and 3.5 for legacy support)
        python-version: ['2.7', '3.5', '3.6', '3.7', '3.8', '3.9']

    steps:
    - uses: actions/checkout@v2
      with:
        # clone submodules as well
        submodules: 'recursive'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip installation
      uses: actions/cache@v2
      id: pip-cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-py_${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py_${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install venv for Python 2.7
      # of course Python 2.7 needs some special treatment
      run: |
        pip install py2venv
      if: matrix.python-version == '2.7'

    - name: Install dependencies
      # create the virtual environment
      run: |
        python -m venv ~/venv && . ~/venv/bin/activate
        python -m pip install --upgrade pip setuptools
        pip install -r tests/requirements.txt

    - name: Test with pytest
      run: |
        . ~/venv/bin/activate
        pip freeze
        python -b -m pytest -v --cov=privacyidea tests/

    - name: Archive code coverage results
      # save the code coverage results as artifacts in order to merge them
      # in the 'finish' job
      uses: actions/upload-artifact@v2
      with:
        name: coverage-${{ matrix.python-version }}
        path: ./.coverage
        retention-days: 1

  finish:
    # run this job after matrix build is finished
    needs: build
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout code for coverage
      uses: actions/checkout@v2
    - name: Cache pip installation
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-coverage }}
        restore-keys: |
          ${{ runner.os }}-pip-coverage
          ${{ runner.os }}-pip-

    - name: Install coverage for merging output
      run: |
        python -m pip install --upgrade pip setuptools
        python -m pip install coverage
        echo "/home/runner/.local/bin" >> $GITHUB_PATH

    - name: Download coverage report artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./cov_reports

    - name: Combine coverage reports
      working-directory: ./cov_reports
      run: |
        coverage combine coverage-*/.coverage
        coverage xml

    - name: Codecov upload
      uses: codecov/codecov-action@v1
      with:
        file: ./cov_reports/coverage.xml
