import logging
import os

# The realm, where users are allowed to login as administrators
SUPERUSER_REALM =  os.getenv("SUPERUSER_REALM","admin,helpdesk").split(',') 

# Your database
SQLALCHEMY_DATABASE_URI = os.getenv("DB_API") + "://" + os.getenv("DB_USER") + ":" + os.getenv("DB_PASSWORD") + "@" + os.getenv("DB_HOST") + ":" + os.getenv("DB_PORT") + "/" + os.getenv("DB_NAME") + os.getenv("DB_EXTRA_PARAMS") if (os.getenv("DB_PASSWORD")) else "sqlite:////privacyidea/etc/persistent/data.sqlite" 

# This is used to encrypt the auth_token
SECRET_KEY = open('%s' % os.getenv("PI_SECRET")).read().rstrip('\n') if os.path.exists(os.getenv("PI_SECRET")) else os.getenv("PI_SECRET")

# This is used to encrypt the admin passwords
PI_PEPPER = open('%s' % os.getenv("PI_PEPPER")).read().rstrip('\n') if os.path.exists(os.getenv("PI_PEPPER")) else os.getenv("PI_PEPPER")
# This is used to encrypt the token data and token passwords
PI_ENCFILE = '/privacyidea/etc/persistent/enckey'

# Scripts
PI_SCRIPT_HANDLER_DIRECTORY='/privacyidea/scripts'

# This is used to sign the audit log
PI_AUDIT_KEY_PRIVATE = '/privacyidea/etc/persistent/private.pem'
PI_AUDIT_KEY_PUBLIC = '/privacyidea/etc/persistent/public.pem'
PI_AUDIT_SQL_TRUNCATE = True

# The Class for managing the SQL connection pool
PI_ENGINE_REGISTRY_CLASS = os.getenv("PI_REGISTRY_CLASS", "shared")
PI_AUDIT_POOL_SIZE = 20

# Logging
PI_LOGCONFIG = '/privacyidea/etc/logging.cfg'
PI_LOGLEVEL =  logging.getLevelName(os.getenv("PI_LOGLEVEL", "INFO").upper())
PI_UUID_FILE = '/privacyidea/etc/persistent/uuid.txt'
# Use true if DB cLuster used (e.g. galera, oracle...)
SQLALCHEMY_ENGINE_OPTIONS= {"pool_pre_ping": os.getenv("PI_SQLALCHEMY_ENGINE_OPTIONS", "False")} 
