"""v3.10: Add column node_uuid to table resolverrealm

Revision ID: d0e7144947d0
Revises: e3a64b4ca634
Create Date: 2023-12-04 17:45:25.949596

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import OperationalError, ProgrammingError

# revision identifiers, used by Alembic.
revision = "d0e7144947d0"
down_revision = "e3a64b4ca634"


def upgrade():
    try:
        op.alter_column(
            "nodename",
            "id",
            existing_type=sa.VARCHAR(length=40),
            type_=sa.Unicode(length=36),
            existing_nullable=False,
        )
        op.add_column(
            "resolverrealm",
            sa.Column("node_uuid", sa.Unicode(length=36), nullable=True),
        )
        op.create_foreign_key(None, "resolverrealm", "nodename", ["node_uuid"], ["id"])
    except (OperationalError, ProgrammingError) as exx:
        if "already exists" in str(exx.orig).lower():
            print("Ok, column 'node_uuid' already exists.")
        else:
            print(exx)
    except Exception as exx:
        print("Could not add column 'node_uuid' to table 'resolverrealm'")
        print(exx)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "resolverrealm", type_="foreignkey")
    op.drop_column("resolverrealm", "node_uuid")
    op.alter_column(
        "nodename",
        "id",
        existing_type=sa.Unicode(length=36),
        type_=sa.VARCHAR(length=40),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
